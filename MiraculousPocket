链接：https://www.nowcoder.com/questionTerminal/9aaea0b82623466a8b29a9f1a00b5d35
来源：牛客网

法一 ：递归  把物品数目n和物品体积数组a[100]设为全局变量;
count(i,sum)表示从数组的第i个数开始往后统计的组合数和为sum的种类数，
sum为组合数的和,则：cout(i,sum)=cout(i+1,sum-a[i])+cout(i+1,sum）,
其中cout(i+1,sum-a[i])表示包含了a[i]，即为从第i+1个数开始往后统计
组合数的和为sum-a[i]的种类数, 而cout(i+1,sum）表示不包含a[i]， 即为从第i+1个数开始往后统计组合数的和为sum的种类数 ***********************************
#include<iostream>
using namespace std;
     
int a[100];
int n=1;
int count(int i,int sum)
{
    if(sum==0){return 1;} //找到一组和为sum的组合数；
    if(i==n||sum<0) return 0;//i==n说明没有其他的数来组合，sum<0说明组合不出;
    return count(i+1,sum-a[i])+count(i+1,sum);//从数组的第i为开始，包含a[i],和不包含;
}
 
int main()
{
    while(cin>>n){
    for(int i=0;i<n;i++)
      cin>>a[i];
    cout<<count(0,40)<<endl;
    }
    return 0;
}


法二:动态规划
 #include<iostream>
using namespace std;
#define N 100
int n,a[N];
int main()
{
    while(cin>>n){
    int (*dp)[50]=new int[N][50];//dp[i][j]表示从前i个物品中凑出体积j；
    for(int i=1;i<=n;i++)
    {
      cin>>a[i];
      dp[i][0]=1; //初始边界
    }
    dp[0][0]=1;
    for(int i=1;i<=n;i++)
      for(int j=1;j<=40;j++)
      {
        dp[i][j]=dp[i-1][j];
        if(a[i]<=j)
          dp[i][j]+=dp[i-1][j-a[i]];
      }
    cout<<dp[n][40]<<endl;
    delete []dp;
    }
    return 0;
}

法三：动态规划，对值域空间-即对容积的可达性进行动态 规划。定义一维数组 int dp[N];
依次放入物品，计算每次放入物品可达的容积， 并在相应空间设置记录，最后判断dp[40] 是否可达 ，到达了几次
#include<iostream>
using namespace std;
#define N 100
int n,a;
int main()
{
    while(cin>>n){
    int *dp=new int[N];//dp[j]表示凑出体积i的次数；
    for(int i=1;i<=n;i++)
    {
      cin>>a;
      for(int j=40;j>=1;j--) //逆序，不然重复更新
       if(dp[j]>0&&j+a<=40)
          dp[j+a]+=dp[j];//如果j有dp[j]种方式可达，则每种方式加上a就可达j+a
      dp[a]++;
    }
    cout<<dp[40]<<endl;
    delete []dp;
    }
    return 0;
}
